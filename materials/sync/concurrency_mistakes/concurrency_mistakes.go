package main

/*
	DATA RACE - несинхр. обращение неск. потоков к одному и тому же участку памяти, где
	как минимум 1 поток осуществляет запись. В такий ситуации нужна синхронизация.

	1. Может возникнуть ситуация, когда программа запускается на 32 битной,
	хотя написана под 64 битную арх. В итоге при разбивке 64 бит. числа может произойти запись,
	которая всё сломает.
	2. memory reordering - компилятор переупорядочивает код для оптимизации.
*/

/*
	RACE CONDITION - ошибка проектирования системы, при которой поведение программы зависит от того
	в каком порядке выполняются инструкции.
*/

/*
	DEADLOCK - ситуация в которой все горутины простаивают в ожидании ресурсов
	и ни одна из них не может начать выполнять полезную работу.
*/

/*
	LIVELOCK - ситуация в которой система не "застревает", но выполняет бесполезную работу.
*/

/*
	Best Practive:
	1. Если проектируется синк. структура данных, то отдавать наружу методы синхронизации и данные,
	доступ к которым должен быть синхронизирован, нельзя.
	2. Чтение и запись должны быть атомарными, а не каждый атомарно, но отдельно.
	3. Избегать Recursive lock.
	4. Избегать встраивания sync.Mutex в структуру напрямую.

*/

/*
	NB!:
	При закрытии канала:
		- Читатели освобождаются и получают zero value + ok = false
		- Писатели получают panic - они не освобождаются, а аварийно завершаются
		Это фундаментальное поведение Go: закрытый канал можно только читать, запись в него всегда вызывает panic.
*/

func main() {
}
